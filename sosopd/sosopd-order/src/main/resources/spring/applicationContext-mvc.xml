<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 加载资源文件 -->
	<!-- <context:property-placeholder location="classpath:spring.properties" ignore-unresolvable="true" /> -->

	<!-- 自动扫描拥有@Controller注解的POJO，使成为控制器，并完成自动注入 -->
	<context:component-scan base-package="cn.sosopd" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	
	<!-- 基于@AspectJ切面的驱动器 -->
	<aop:aspectj-autoproxy />
	
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<constructor-arg value="UTF-8" index="0"></constructor-arg>
		<!-- 避免出现乱码 -->
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean> 

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<ref bean="stringHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>	

	<!-- ========================================================================== -->
	<!-- ============================== 视图解析相关配置 ============================== -->
	<!-- ========================================================================== -->
	<!-- 配置JSP视图解析器，将ModelAndView及字符串解析为具体的页面 -->
	<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" /> -->
	<!-- 配置FreeMarker视图解析器，将ModelAndView及字符串解析为具体的页面 -->
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer" p:defaultEncoding="UTF-8">
		<property name="freemarkerSettings">
			<props>
				<!-- 空值处理 -->
				<prop key="classic_compatible">true</prop>
				<!-- 延迟加载模版文件时间（秒） -->
				<prop key="template_update_delay">0</prop>
				<prop key="number_format">#.##</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="date_format">yyyy年MM月dd日</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<prop key="boolean_format">true,false</prop>
				<prop key="defaultEncoding">UTF-8</prop>
				<prop key="url_escaping_charset">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
			</props>
		</property>
		<!-- 指定加载模版文件的路径 -->
		<property name="templateLoaderPath" value="classpath:view" />
		<!-- <property name="preTemplatePath" value="classpath:view" /> -->
		<!-- <property name="ingoreTemplateError" value="false" /> -->
	</bean>
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"
		p:order="5" p:suffix=".ftl" p:contentType="text/html; charset=UTF-8" />
	
	
	
	<!-- Spring 3.2 及以上版本自动开启检测URL后缀,设置Response content-type功能,如果不手动关闭这个功能,当url后缀与accept头不一致时,Response的content-type将会和request的accept不一致,导致报406 -->
	<!-- http://www.cnblogs.com/zemliu/archive/2013/10/16/3369476.html -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="false" />
		<property name="favorParameter" value="false" />
	</bean>


	<!-- ========================================================================== -->
	<!-- ============================== 静态资源相关配置 ============================== -->
	<!-- ========================================================================== -->
	<!-- 如果使用了静态资源映射必须先加上这个<mvc:annotation-driven />，否则出错，折腾了好久啊 -->
	<mvc:default-servlet-handler />
	<bean id="resourceHttpRequestHandler" class="org.springframework.web.servlet.resource.ResourceHttpRequestHandler"></bean>
	<!-- 使用客户端浏览器缓存，但是造成更改静态资源后浏览器还是看到旧资源的问题，所以每次启动应用映射为不同的路径从而使浏览器缓存失效 -->
	<bean id="resourcePathExposer" class="cn.sosopd.common.interceptor.ApplicationContextInit" init-method="init" />
	<mvc:resources mapping="#{resourcePathExposer.resourceRoot}/**"
		location="classpath:web/" />
	<!-- 配置用户上传图片的静态资源映射 -->
	<mvc:resources mapping="#{resourcePathExposer.resourceRoot}/upload/**"
		location="/upload/" />
		
	<!-- ========================================================================== -->
	<!-- ============================== 文件上传相关配置 ============================== -->
	<!-- ========================================================================== -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8" p:uploadTempDir="upload/temp" />
	
	
	<!-- ========================================================================== -->
	<!-- ================================ 拦截器配置 ================================= -->
	<!-- ========================================================================== -->
	<mvc:interceptors>
		<!-- 系统拦截器，预处理所有页面请求和Ajax请求 -->
		<mvc:interceptor>
			<mvc:mapping path="/*.html" />
			<mvc:mapping path="/*.json" />
			<mvc:mapping path="/**/*.html" />
			<mvc:mapping path="/**/*.json" />
			<mvc:exclude-mapping path="/login.html" />
			<mvc:exclude-mapping path="/**/login.html" />
			<bean class="cn.sosopd.common.interceptor.SystemInterceptor" />
		</mvc:interceptor>
		<!-- 开发用拦截器，拦截不符合要求的请求URL，促使开发者遵守约定 -->
		<mvc:interceptor>
			<mvc:mapping path="/*" />
			<mvc:mapping path="/**/*" />
			<!-- 静态资源请求不拦截 -->
			<mvc:exclude-mapping path="#{resourcePathExposer.resourceRoot}/*" />
			<mvc:exclude-mapping path="#{resourcePathExposer.resourceRoot}/**/*" />
			<!-- 上传资源请求不拦截 -->
			<mvc:exclude-mapping path="/upload/*" />
			<mvc:exclude-mapping path="/upload/**/*" />
			<bean class="cn.sosopd.common.interceptor.DevelopInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
</beans>